#+STARTUP:    align fold hidestars oddeven indent 

* lsp next prev occurence

We may implement this method by using either textDocument/documentHighlight
which are scoped to the current buffer or by textDocument/references (which is
not scoped to the current buffer). If you want to give it a try you may take a
look at lsp--make-document-highlight-callback which is handling the rendering of
the highlights. It will be good if we reuse the data for two subsequent calls to
next occurrence if there are no changes.

** TODO call lsp highlight and log out result

(:jsonrpc "2.0" :method "textDocument/documentHighlight" :params (:textDocument (:uri "file:///home/gvuong/git/ivt6/projects/web/src/webserver/src/routes/api/hvr-cameras.js") :position (:line 75 :character 10)) :id 23)
highlight: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("kind" 2 "range" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("start" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 75 "character" 10)) "end" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 75 "character" 18)))))) 
range: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("start" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 75 "character" 10)) "end" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 75 "character" 18)))) 
kind: 2 
start: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 75 "character" 10)) 
end: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 75 "character" 18)) 
highlight: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("kind" 2 "range" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("start" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 76 "character" 16)) "end" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 76 "character" 24)))))) 
range: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("start" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 76 "character" 16)) "end" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 76 "character" 24)))) 
kind: 2 
start: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 76 "character" 16)) 
end: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 76 "character" 24)) 
highlight: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("kind" 2 "range" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("start" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 78 "character" 51)) "end" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 78 "character" 59)))))) 
range: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("start" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 78 "character" 51)) "end" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 78 "character" 59)))) 
kind: 2 
start: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 78 "character" 51)) 
end: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 78 "character" 59)) 

** convert `start` to point with lsp--position-to-point

(:jsonrpc "2.0" :method "textDocument/documentHighlight" :params (:textDocument (:uri "file:///home/gvuong/git/ivt6/projects/web/src/webserver/src/routes/api/hvr-cameras.js") :position (:line 75 :character 10)) :id 24)
start: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 75 "character" 10)) 
end: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 75 "character" 18)) 
point: 2182 
start: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 76 "character" 16)) 
end: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 76 "character" 24)) 
point: 2242 
start: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 78 "character" 51)) 
end: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 78 "character" 59)) 
point: 2304 

** once you have the list of point you need to have

- current point
- compare current point to find next and prev points

let check 
* helm evil mark
reuse part of evil-show-marks to generate helm source
use evil-goto-mark to go to buffer
* helm lsp 
symbols with context 
* ivy from doom
[x] full length highlight
[ ] better-jump
[ ] kill ring
[ ] ivy-rich
https://github.com/Yevgnen/ivy-rich/issues/87
https://github.com/hlissner/doom-emacs/issues/1317
https://github.com/syl20bnr/spacemacs/issues/10101
https://github.com/Yevgnen/ivy-rich/pull/57
[ ] c-r bound to minibuffer history in spacemacs
#+begin_src elisp
  ;; A Doom convention where C-s on popups and interactive searches will invoke
  ;; ivy/helm for their superior filtering.
  (when-let (command (cond ((featurep! :completion ivy)
                            #'counsel-minibuffer-history)
                           ((featurep! :completion helm)
                            #'helm-minibuffer-history)))
    (define-key!
      :keymaps (append +default-minibuffer-maps
                       (when (featurep! :editor evil +everywhere)
                         '(evil-ex-completion-map)))
      "C-s" command))
#+end_src

[ ]  


* lsp-sov
a function to refresh the symbol list

create a hash table then go through the buffer
for each overlay get the symbol info and face value

put it in the hash table { face: symbol }

then maphash the table 

